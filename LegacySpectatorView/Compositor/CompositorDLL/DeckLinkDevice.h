/* -LICENSE-START-
** Copyright (c) 2013 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
** 
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

#pragma once

#if USE_DECKLINK || USE_DECKLINK_SHUTTLE

#include <Windows.h>
#include <vector>
#include "DeckLinkAPI_h.h"
#include "DirectXHelper.h"

class DeckLinkDevice : public IDeckLinkInputCallback
{
private:
    enum PixelFormat
    {
        YUV,
        BGRA
    };

    PixelFormat pixelFormat = PixelFormat::YUV;

    ULONG                     m_refCount;
    IDeckLink*                m_deckLink;
    IDeckLinkInput*           m_deckLinkInput;
    IDeckLinkOutput*          m_deckLinkOutput;
    BMDTimeScale              m_playbackTimeScale;
    BOOL                      m_supportsFormatDetection;
    bool                      m_currentlyCapturing;
    CRITICAL_SECTION          m_captureCardCriticalSection;
    CRITICAL_SECTION          m_frameAccessCriticalSection;
    CRITICAL_SECTION          m_outputCriticalSection;

    BYTE* localFrameBuffer;
    BYTE* rawBuffer =           new BYTE[FRAME_BUFSIZE_RAW];

    BYTE* thirdCachedBuffer =   new BYTE[FRAME_BUFSIZE];
    BYTE* secondCachedBuffer =  new BYTE[FRAME_BUFSIZE];
    BYTE* latestBuffer =        new BYTE[FRAME_BUFSIZE];
    BYTE* stagingBuffer =       new BYTE[FRAME_BUFSIZE];
    BYTE* outputBuffer =        new BYTE[FRAME_BUFSIZE];
    BYTE* outputBufferRaw =     new BYTE[FRAME_BUFSIZE_RAW];

    BMDTimeValue frameDuration = 0;

    LONGLONG latestTimeStamp = 0;
    LONGLONG secondTimeStamp = 0;
    LONGLONG thirdTimeStamp = 0;

    bool dirtyFrame = true;
    bool isVideoFrameReady = false;

    ID3D11ShaderResourceView* _colorSRV;
    ID3D11Texture2D* _outputTexture;
    ID3D11Device* device;

    bool _useCPU;
    bool _passthroughOutput;

public:
    DeckLinkDevice(IDeckLink* device);
    virtual ~DeckLinkDevice();

    bool                                Init(ID3D11ShaderResourceView* colorSRV, ID3D11Texture2D* outputTexture, bool useCPU = false, bool passthroughOutput = false);
    bool                                IsCapturing() { return m_currentlyCapturing; };
    bool                                SupportsFormatDetection() { return (m_supportsFormatDetection == TRUE); };
    bool                                StartCapture(BMDDisplayMode videoDisplayMode);
    void                                StopCapture();
    IDeckLink*                          DeckLinkInstance() { return m_deckLink; }

    void Update();

    bool supportsOutput = true;

    // IUnknown interface
    virtual HRESULT  STDMETHODCALLTYPE    QueryInterface (REFIID iid, LPVOID *ppv);
    virtual ULONG    STDMETHODCALLTYPE    AddRef ();
    virtual ULONG    STDMETHODCALLTYPE    Release ();

    // IDeckLinkInputCallback interface
    virtual HRESULT  STDMETHODCALLTYPE    VideoInputFormatChanged (/* in */ BMDVideoInputFormatChangedEvents notificationEvents, /* in */ IDeckLinkDisplayMode *newDisplayMode, /* in */ BMDDetectedVideoInputFormatFlags detectedSignalFlags);
    virtual HRESULT  STDMETHODCALLTYPE    VideoInputFrameArrived (/* in */ IDeckLinkVideoInputFrame* frame, /* in */ IDeckLinkAudioInputPacket* audioPacket);

    LONGLONG GetTimestamp()
    {
        return thirdTimeStamp;
    }

    LONGLONG GetDurationHNS()
    {
        return frameDuration;
    }

    bool OutputYUV();

    bool IsVideoFrameReady();
};

class DeckLinkDeviceDiscovery :  public IDeckLinkDeviceNotificationCallback
{
private:
    IDeckLinkDiscovery*                 m_deckLinkDiscovery;
    ULONG                               m_refCount;
    IDeckLink*                          m_deckLink = nullptr;

public:
    DeckLinkDeviceDiscovery();
    virtual ~DeckLinkDeviceDiscovery();

    IDeckLink*                          GetDeckLink() { return m_deckLink; }

    bool                                Enable();
    void                                Disable();

    // IDeckLinkDeviceNotificationCallback interface
    virtual HRESULT  STDMETHODCALLTYPE    DeckLinkDeviceArrived (/* in */ IDeckLink* deckLink);
    virtual HRESULT  STDMETHODCALLTYPE    DeckLinkDeviceRemoved (/* in */ IDeckLink* deckLink);

    virtual HRESULT  STDMETHODCALLTYPE    QueryInterface (REFIID iid, LPVOID *ppv);
    virtual ULONG    STDMETHODCALLTYPE    AddRef ();
    virtual ULONG    STDMETHODCALLTYPE    Release ();
};

#endif
